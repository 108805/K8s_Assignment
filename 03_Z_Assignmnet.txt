Learning Objectives:-
Create a yaml file containing the pod spec for the nginx pod.
Create the pod.


Your company is getting ready to launch a new website, and they need you to set up an nginx web server in their Kubernetes cluster. The nginx server will need to be accessible via network in the future, so you will need to expose port 80 as a containerPort for the nginx container. Your team has also asked you to ensure that nginx runs in quiet mode for the time being to cut down on unnecessary log output. You can do this by setting the command to nginx and passing the following arg to the container: -g daemon off; -q. As this nginx server belongs to the Web team, you will need to create it in the team's web namespace.

To summarize:

Use the nginx container image.
The container needs a containerPort of 80.
Set the command to nginx
Pass in the -g daemon off; -q args to run nginx in quiet mode.
Create the pod in the web namespace.
Once the pod is created, you should be able to find it with kubectl get pods -n web. Once the pod is created, you can get more information about its current status with kubectl describe pod nginx -n web.

---------------------------------------------------------------------------------------------------------------------------------------------------

master $ cat nginx.yml

apiVersion: v1

kind: Pod

metadata:

  name: nginx

  labels:

    app: web

  namespace: web

spec:

  containers:

  - name: nginx

    image: nginx:1.8

    command:

    - nginx

    args:

    - -g

    - "daemon off;"

    - -q

    ports:

    - containerPort: 80



creating namespace

------------------

master $ kubectl create ns web

namespace/web created



creating pod

------------

master $ kubectl create -f nginx.yml

pod/nginx created



Testing

--------

master $ kubectl get pod -n web

NAME    READY   STATUS    RESTARTS   AGE

nginx   1/1     Running   0          25s



master $ kubectl describe pod nginx -n web

Name:               nginx

Namespace:          web

Priority:           0

PriorityClassName:  <none>

Node:               node01/172.17.0.71

Start Time:         Tue, 13 Jun 2020 03:48:13 +0000

Labels:             app=web

Annotations:        <none>

Status:             Running

IP:                 10.32.0.2

Containers:

  nginx:

    Container ID:  docker://d3b6b5d3ade84d2581e33c6e05eb3bc94fddfba8cc295494cf19c7046485374c

    Image:         nginx:1.8

    Image ID:      docker-pullable://nginx@sha256:c97ee70c4048fe79765f7c2ec0931957c2898f47400128f4f3640d0ae5d60d10

    Port:          80/TCP

    Host Port:     0/TCP

    Command:

      nginx

    Args:

      -g

      daemon off;

      -q

    State:          Running

      Started:      Tue, 13 Jun 2020 03:48:19 +0000

    Ready:          True

    Restart Count:  0

    Environment:    <none>

    Mounts:

      /var/run/secrets/kubernetes.io/serviceaccount from default-token-n8nmk (ro)

Conditions:

  Type              Status

  Initialized       True

  Ready             True

  ContainersReady   True

  PodScheduled      True

Volumes:

  default-token-n8nmk:

    Type:        Secret (a volume populated by a Secret)

    SecretName:  default-token-n8nmk

    Optional:    false

QoS Class:       BestEffort

Node-Selectors:  <none>

Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s

                 node.kubernetes.io/unreachable:NoExecute for 300s

Events:

  Type    Reason     Age   From               Message

  ----    ------     ----  ----               -------

  Normal  Scheduled  58s   default-scheduler  Successfully assigned web/nginx to node01

  Normal  Pulling    57s   kubelet, node01    Pulling image "nginx:1.8"

  Normal  Pulled     53s   kubelet, node01    Successfully pulled image "nginx:1.8"

  Normal  Created    53s   kubelet, node01    Created container nginx

  Normal  Started    52s   kubelet, node01    Started container nginx